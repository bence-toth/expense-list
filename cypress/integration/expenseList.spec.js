/* global context, cy */
/* eslint-disable sonarjs/no-duplicate-string */

context('Expenses', () => {
  beforeEach(() => {
    cy.viewport(1200, 1000)
    cy.visit('https://localhost:8080/')
  })

  it('Shows expenses on page load', () => {
    cy.get('.expenses .expenseButton')
      .should('exist')
    cy.get('.expenses .expenseButton')
      .first()
      .as('ExpenseSummary')
    cy.get('@ExpenseSummary')
      .find('.category')
      .should('exist')
    cy.get('@ExpenseSummary')
      .find('.merchant')
      .should('exist')
    cy.get('@ExpenseSummary')
      .find('.user')
      .should('exist')
    cy.get('@ExpenseSummary')
      .find('.date')
      .should('exist')
    cy.get('@ExpenseSummary')
      .find('.amount')
      .should('exist')
  })

  it('Loads more expenses on scroll to bottom', () => {
    const pageSize = 15
    cy.get('.expenses .expenseButton')
      .its('length')
      .should('be', pageSize)
    cy.get('.expenses')
      .scrollTo('bottom')
    cy.wait(100)
    cy.get('.expenses .expenseButton')
      .its('length')
      .should('be.gt', pageSize)
  })

  it('Shows expense details when clicking on summary', () => {
    cy.get('.expenses .expenseButton')
      .first()
      .click()
    cy.wait(150)
    cy.get('.expenses .modal')
      .as('Modal')
      .should('exist')
    cy.get('@Modal')
      .find('.category')
      .should('exist')
    cy.get('@Modal')
      .find('.merchant')
      .should('exist')
    cy.get('@Modal')
      .find('.date')
      .should('exist')
    cy.get('@Modal')
      .find('.amount')
      .should('exist')
    cy.get('@Modal')
      .find('.name')
      .should('exist')
    cy.get('@Modal')
      .find('#uploadReceipt')
      .should('exist')
    cy.get('@Modal')
      .find('.quill ')
      .should('exist')
    cy.get('.closeModalButton')
      .click()
    cy.wait(150)
    cy.get('.expenses .modal')
      .should('not.exist')
  })

  it('Stores comment updates', () => {
    cy.get('.expenses .expenseButton')
      .first()
      .click()
    cy.wait(150)
    const comment = `I wrote this comment at ${Date.now()}.`
    cy.get('.expenses .modal .ql-editor')
      .click()
      .clear()
      .type(comment)
    cy.get('.closeModalButton')
      .click()
    cy.wait(150)
    cy.get('.expenses .expenseButton')
      .first()
      .click()
    cy.wait(150)
    cy.get('.expenses .modal .ql-editor')
      .first()
      .should(([element]) => {
        expect(element.textContent).to.equal(comment)
      })
  })

  it('Applies search query', () => {
    cy.get('#expenseSearch')
      .clear()
      .type('ab')
    cy.wait(200)
    cy.get('.expenses .expenseButton')
      .each(button => {
        cy.wrap(button)
          .contains(/ab/i)
          .should('exist')
      })
  })
})
